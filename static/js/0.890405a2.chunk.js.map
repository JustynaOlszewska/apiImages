{"version":3,"sources":["styles/styleComponents/StyledFormPhoto.ts","components/molecules/form/Form.tsx"],"names":["StyledForm","styled","div","StyledContainerInput","StyledInput","input","StyledIcon","i","StyledButton","button","theme","bg","StyledNavLink","NavLink","col","Alert","React","lazy","Form","match","useRouteMatch","myRef","useRef","useState","animation","setAnimation","alertContext","useContext","AlertContext","fetchContext","FetchContext","validationContext","ValidationContext","paginateContext","PaginateContext","setAlert","photosFilterDuplicate","setLoadingImages","searchPhotos","value","setText","currentPage","console","log","map","element","useEffect","length","localStorage","getItem","valueStarge","disabledButton","bool","current","disabled","setTimeout","showAlerts","name","list","type","onChange","e","valueInput","target","setItem","id","index","title","className","ref","onClick","removeItem","to","path"],"mappings":"w1CAaO,IAAMA,EAAaC,UAAOC,IAAV,KAaVC,EAAuBF,UAAOC,IAAV,KASpBE,EAAcH,UAAOI,MAAV,KAUXC,EAAaL,UAAOM,EAAV,KASVC,EAAeP,UAAOQ,OAAV,KAKH,qBAAGC,MAAkBC,MAG9BC,EAAgBX,kBAAOY,IAAPZ,CAAH,KAEf,qBAAGS,MAAkBI,O,gCCxD1BC,EAASC,IAAcC,MAAK,kBAAM,iCA2GzBC,UAjFH,SAAC,GAA2B,IAAD,EAAxBR,EAAwB,EAAxBA,MACLS,EAAQC,cACRC,EAAOC,iBAA0B,MAFJ,EAGDC,oBAAkB,GAHjB,mBAG5BC,EAH4B,KAGjBC,EAHiB,KAI7BC,EAAeC,qBAAWC,KAC1BC,EAAeF,qBAAWG,KAC1BC,EAAoBJ,qBAAWK,KAC/BC,EAAkBN,qBAAWO,KAE3BC,GAAyBT,GAAgB,IAAzCS,SAT2B,EAU4CN,GAAgB,GAAvFO,EAV2B,EAU3BA,sBAAuBC,EAVI,EAUJA,iBAAkBC,EAVd,EAUcA,aAVd,EAWSP,GAAqB,GAAzDQ,EAX2B,EAW3BA,MAAOC,EAXoB,EAWpBA,QACPC,GAA2BR,GAAmB,IAA9CQ,YACRC,QAAQC,IAAI,QAASP,EAAsBQ,KAAI,SAAAC,GAAO,OAAIA,MAC1DC,qBAAU,YACG,OAALP,QAAK,IAALA,OAAA,EAAAA,EAAOQ,SAAU,GACjBT,EAAaC,EAAOE,KAGzB,CAACF,EAAOE,IAEXK,qBAAU,WACN,GAA2C,OAAvCE,aAAaC,QAAQ,cAAwB,CAC7C,IAAMC,EAAcF,aAAaC,QAAQ,cACzCT,EAAQU,MAGb,IAEH,IAYMC,EAAiB,SAACC,GACpB/B,EAAMgC,UAAYhC,EAAMgC,QAAQC,SAAWF,GAC3CG,YAAW,WACPlC,EAAMgC,UAAYhC,EAAMgC,QAAQC,UAAW,GAC3C7B,GAAa,KACd,MAGD+B,EAAa,WACG,IAAjBjB,EAAMQ,QAAiBZ,EAAS,yBAA0B,SAC3DI,GAASJ,EAAS,uBAAwB,UAU9C,OACI,qCACI,cAACnC,EAAD,UACI,eAACG,EAAD,WACI,cAACC,EAAD,CAAaqD,KAAK,OAAOC,KAAK,SAASC,KAAK,OACxCC,SAZC,SAACC,GAClB,IAAMC,EAAqBD,EAAEE,OAAOxB,MACpCS,aAAagB,QAAQ,aAAcF,GACnCzB,GAAiB,GACjBG,EAAQsB,IAQgCvB,MAAOA,IACnC,0BAAU0B,GAAG,SAAb,SACK7B,EAAsBQ,KAAI,SAACC,EAASqB,GAAV,OAAoB,iCAAqCrB,EAAQsB,OAA7C,UAAgBtB,EAAhB,YAA2BqB,SAE9E,cAAC5D,EAAD,CAAY8D,UAAU,kBACtB,cAAC,gBAAD,CAAe1D,MAAOA,EAAtB,SACI,cAACF,EAAD,CAAc6D,IAAKhD,EAAOsC,KAAK,SAASW,QA3CxC,WAChB7C,GAAa,GACTc,EAAMQ,QAAU,GAChBV,GAAiB,GACjBG,EAAQ,KACDD,EAAMQ,OAAS,IACtBS,IACAL,GAAe,IAEnBH,aAAauB,WAAW,eAkCsDjB,SAAQ,OAAEjC,QAAF,IAAEA,GAAF,UAAEA,EAAOgC,eAAT,aAAE,EAAgBC,SAAxF,SAAkG,cAAC1C,EAAD,CAAe4D,KAAKjC,EAAMQ,OAAS,IAAMR,GAA0B,MAAfpB,EAAMsD,MAA+B,eAAftD,EAAMsD,KAA+B,QAAN,IAAzG,8BAI9G,cAAC1D,EAAD,CAAOS,UAAWA","file":"static/js/0.890405a2.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport {\r\n  NavLink\r\n} from \"react-router-dom\";\r\n\r\ninterface ThemeProps {\r\n  theme: Theme;\r\n};\r\n\r\ninterface Theme {\r\n  bg: string;\r\n    col: string;\r\n}\r\nexport const StyledForm = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n& > button {\r\n  background-color: rgba(255, 142, 83,0.5);\r\n& *{\r\n  color: #454441;\r\n  text-decoration: none;\r\n};\r\n};\r\n`;\r\n\r\nexport const StyledContainerInput = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 70px;\r\n  @media (min-width: 1279px), (min-height: 1000px)and (orientation: portrait) {\r\n    height: 120px;\r\n  };\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n  position: absolute; \r\n  width: 98%; \r\n  height: 50%;\r\n  left: 50%; \r\n  transform: translateX(-50%);\r\n  top: 0;\r\n  text-indent: 7%;\r\n`;\r\n\r\nexport const StyledIcon = styled.i`\r\n  position: absolute;\r\n  top: 25%; \r\n  left: 3%;\r\n  transform: translateY(-25%);\r\n  color: black;\r\n  text-shadow: 0px 0px black;\r\n`;\r\n\r\nexport const StyledButton = styled.button<ThemeProps>`\r\n  position: absolute;\r\n  bottom: 0; \r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background-color: ${({ theme }) => theme.bg};\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink)<ThemeProps>`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.col};\r\n`;","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { StyledForm, StyledContainerInput, StyledInput, StyledIcon, StyledButton, StyledNavLink } from '../../../styles/styleComponents/StyledFormPhoto';\r\nimport FetchContext from \"../../../context/fetch/fetchContext\";\r\nimport AlertContext from \"../../../context/alert/alertContext\";\r\nimport ValidationContext from \"../../../context/validationForm/validationContext\";\r\nimport PaginateContext from \"../../../context/paginate/paginateContext\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nconst Alert = (React as any).lazy(() => import(\"../../atoms/alert/Alert\"));\r\n\r\ntype AlertProps = {\r\n    setAlert: (msg: string, style: string) => void;\r\n};\r\ntype PhotosProps = {\r\n    photosFilterDuplicate: Array<Title>;\r\n    setLoadingImages: (boll: boolean) => void;\r\n    searchPhotos: (value: string, currentPage: number) => Promise<void>;\r\n};\r\ntype Title = {\r\n    title: string\r\n};\r\ntype ValidationProps = {\r\n    value: string;\r\n    setText: (value: string | null) => void;\r\n};\r\ntype PageProps = {\r\n    currentPage: number;\r\n};\r\ntype ThemeProps = {\r\n    theme: {\r\n    col: string;\r\n    bg: string;\r\n  };\r\n};\r\nconst Form= ({ theme }: ThemeProps) => {\r\n    const match = useRouteMatch();\r\n    const myRef= useRef<HTMLButtonElement>(null);\r\n    const [animation, setAnimation] = useState<boolean>(false);\r\n    const alertContext = useContext(AlertContext);\r\n    const fetchContext = useContext(FetchContext);\r\n    const validationContext = useContext(ValidationContext);\r\n    const paginateContext = useContext(PaginateContext);\r\n\r\n    const { setAlert }: AlertProps = alertContext || {};\r\n    const { photosFilterDuplicate, setLoadingImages, searchPhotos }: PhotosProps = fetchContext || {};\r\n    const { value, setText }: ValidationProps = validationContext || {};\r\n    const { currentPage }: PageProps = paginateContext || {};\r\n    console.log(\"thrme\", photosFilterDuplicate.map(element => element));\r\n    useEffect((): void => {\r\n        if (value?.length >= 3) {\r\n            searchPhotos(value, currentPage);\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [value, currentPage]);\r\n\r\n    useEffect((): void => {\r\n        if (localStorage.getItem(\"valueInput\") !== null) {\r\n            const valueStarge = localStorage.getItem(\"valueInput\");\r\n            setText(valueStarge);\r\n        }\r\n        //eslint-disable-next-line\r\n    }, []);\r\n\r\n    const handleClick = (): void => {\r\n        setAnimation(true);\r\n        if (value.length >= 3) {\r\n            setLoadingImages(true);\r\n            setText(\"\");\r\n        } else if (value.length < 3) {\r\n            showAlerts();\r\n            disabledButton(true);\r\n        }\r\n        localStorage.removeItem(\"valueInput\");\r\n    };\r\n\r\n    const disabledButton = (bool: boolean): void => {\r\n        myRef.current && (myRef.current.disabled = bool);\r\n        setTimeout(() => {\r\n            myRef.current && (myRef.current.disabled = false);\r\n            setAnimation(false);\r\n        }, 5000);\r\n    };\r\n\r\n    const showAlerts = (): void => {\r\n        (value.length === 0) && setAlert('please enter something', 'light');\r\n        value && setAlert('minimum 3 characters', 'light')\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const valueInput: string = e.target.value;\r\n        localStorage.setItem(\"valueInput\", valueInput);\r\n        setLoadingImages(false);\r\n        setText(valueInput);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledForm>\r\n                <StyledContainerInput >\r\n                    <StyledInput name=\"text\" list=\"photos\" type=\"text\"\r\n                        onChange={handleChange} value={value} />\r\n                    <datalist id=\"photos\">\r\n                        {photosFilterDuplicate.map((element, index) => <option key={`${element}+${index}`}>{element.title}</option>)}\r\n                    </datalist>\r\n                    <StyledIcon className=\"fas fa-search\" />\r\n                    <ThemeProvider theme={theme}>\r\n                        <StyledButton ref={myRef} type=\"submit\" onClick={handleClick} disabled={myRef?.current?.disabled}><StyledNavLink to={(value.length < 3 || !value) && (match.path === \"/\" || match.path === \"/apiImages\") ? \"/\" : \"/main\"} >Show me</StyledNavLink></StyledButton>\r\n                    </ThemeProvider>\r\n                </StyledContainerInput>\r\n            </StyledForm>\r\n            <Alert animation={animation} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Form;"],"sourceRoot":""}